# -*- coding: utf-8 -*-
# author：albert time:2021/2/20
# 自动下载用户收藏夹内的所有视频
import json
import os
import requests
import time
from lxml import etree
import pandas as pd
import shutil


headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3970.5 Safari/537.36',
    'Refer'
    'er': 'https://www.bilibili.com/'
}
# https
requests.packages.urllib3.disable_warnings()


def get_user_favlist(user_id, save_dict, favlist_name):
    # https://api.bilibili.com/x/v3/fav/folder/created/list-all?up_mid=3916501
    # 下载所有收藏夹
    user_url = "https://api.bilibili.com/x/v3/fav/folder/created/list-all?up_mid=" + \
        str(user_id)
    data_1 = json.loads(requests.get(user_url).text)
    favlist_list = []

    for dd in data_1['data']['list']:
        # 获取所有收藏夹ID
        # favlist_dict = {
        #     'favlist_title': '默认收藏夹',
        #     'favlist_id': '48129101',
        #     'media_count': 20
        # }

        # 根据收藏夹名下载
        if favlist_name:
            if favlist_name == dd['title']:
                favlist_dict = {
                    'favlist_title': dd['title'],
                    'favlist_id': dd['id'],
                    'media_count': dd['media_count']
                }

                favlist_list.append(favlist_dict)
                favlist_dirname = (
                        save_dict +
                        favlist_dict['favlist_title']).encode("utf-8").decode("utf-8")
                if not os.path.exists(favlist_dirname):
                    os.makedirs(favlist_dirname)
                    print(favlist_dict['favlist_title'] + '创建成功!')

                break

        else:
            favlist_dict = {
                'favlist_title': dd['title'],
                'favlist_id': dd['id'],
                'media_count': dd['media_count']
            }

            favlist_list.append(favlist_dict)
            favlist_dirname = (
                    save_dict +
                    favlist_dict['favlist_title']).encode("utf-8").decode("utf-8")
            if not os.path.exists(favlist_dirname):
                os.makedirs(favlist_dirname)
                print(favlist_dict['favlist_title'] + '创建成功!')




    # 遍历收藏夹
    for f in favlist_list:
        # 收藏夹页数
        favlist_page = 1
        # 视频序号
        index = 0
        # 遍历收藏夹内的视频
        for x in range(0, f['media_count'], 20):
            # print("当前页数：", favlist_page)
            favlist_video_list = []
            favlist_url = "https://api.bilibili.com/x/v3/fav/resource/list?media_id=" + \
                str(f['favlist_id']) + "&pn=" + str(favlist_page) + "&ps=20"
            data_2 = json.loads(requests.get(favlist_url).text)
            favlist_data = data_2['data']['medias']
            # 获取BV号
            for b in favlist_data:
                favlist_video = {
                    'favlist_title': f['favlist_title'],
                    'title': b['title'],
                    'bv_id': b['bv_id'],
                    'img': b['cover'],
                    'intro': b['intro'],
                    'page': b['page'],
                    'upper_name': b['upper']['name']

                }

                favlist_video_list.append(favlist_video)
                # 保存收藏视频信息及当前日期到本地
                # print('favlist_video', favlist_video)
                # print('favlist_dirname', favlist_dirname)
                df = pd.DataFrame(favlist_video, index=[0])
                df['time'] = time.strftime(
                    "%Y-%m-%d %H:%M:%S", time.localtime())
                if not os.path.exists(
                        save_dict + favlist_video['favlist_title'] + '/' + favlist_video['favlist_title'] + '.csv'):
                    df.to_csv(
                        save_dict +
                        favlist_video['favlist_title'] +
                        '/' +
                        favlist_video['favlist_title'] +
                        '.csv',
                        encoding='utf_8_sig',
                        mode='a',
                        index=False,
                        index_label=False)
                else:
                    df.to_csv(
                        save_dict +
                        favlist_video['favlist_title'] +
                        '/' +
                        favlist_video['favlist_title'] +
                        '.csv',
                        encoding='utf_8_sig',
                        mode='a',
                        index=False,
                        index_label=False,
                        header=False)

            # 遍历视频
            for v in favlist_video_list:
                index += 1
                favlist_title = v['favlist_title']
                video_name = v['title']
                video_bv = v['bv_id']
                print("当前收藏夹页面---------------------------",
                      favlist_title, "第", favlist_page, "页")
                print("当前收藏夹进度-----------------------",
                      int(index / f['media_count'] * 100), "%")
                # print(v)
                # 以BV号构建视频文件夹
                video_dirname = (
                    save_dict +
                    favlist_title +
                    '/' +
                    video_bv).encode("utf-8").decode("utf-8")
                if not os.path.exists(video_dirname):
                    os.makedirs(video_dirname)
                    print(video_name + '——创建成功!')

                # 保存图片
                # 如果名称不可用则使用BV号代替
                try:
                    open(
                        save_dict +
                        favlist_title +
                        '/' + video_name + '/' +
                        video_name +
                        '.jpg',
                        'wb').write(
                        requests.get(
                            v['img']).content)
                except Exception:
                    open(
                        save_dict +
                        favlist_title +
                        '/' + video_bv + '/' +
                        video_bv +
                        '.jpg',
                        'wb').write(
                        requests.get(
                            v['img']).content)
                # 保存视频相关信息

                # https://api.bilibili.com/x/player/pagelist?bvid=BV1kr4y1K71E
                # 遍历分P
                video_p = 'https://api.bilibili.com/x/player/pagelist?bvid=' + \
                    str(video_bv)
                time.sleep(0.5)
                data_3 = json.loads(requests.get(video_p).text)
                bv_dict = data_3['data']
                try:
                    for v_p in bv_dict:
                        if v_p['part']:
                            video_data = {
                                'favlist_title': favlist_title,
                                'video_dirname': video_dirname,
                                'video_bv': video_bv,
                                'video_name': v_p['part'],
                                'video_p': v_p['page'],
                            }
                        else:
                            video_data = {
                                'favlist_title': favlist_title,
                                'video_dirname': video_dirname,
                                'video_bv': video_bv,
                                'video_name': video_bv,
                                'video_p': v_p['page'],
                            }
                        # print(video_data)
                        if not os.path.exists(
                                video_dirname + '/' + video_data['video_name'] + '.mp4'):
                            get_video(video_data)
                            print(video_dirname)
                    df2 = pd.DataFrame(v, index=[0])
                    if not os.path.exists(
                            video_dirname + '/' + favlist_video[
                                'favlist_title'] + '.csv'):
                        df2.to_csv(
                            video_dirname +
                            '/' +
                            video_data['video_name'] +
                            '.csv',
                            encoding='utf_8_sig',
                            index=False,
                            index_label=False)
                    else:
                        df2.to_csv(
                            video_dirname +
                            '/' +
                            video_data['video_name'] +
                            '.csv',
                            encoding='utf_8_sig',
                            index=False,
                            index_label=False)

                except BaseException:
                    # 删除出错的视频文件夹
                    shutil.rmtree(video_dirname)
                    continue
            favlist_page += 1


def get_video(video_data):
    time.sleep(1)
    url = "https://www.bilibili.com/video/" + \
        str(video_data['video_bv']) + "?p=" + str(video_data['video_p'])
    session = requests.session()
    res = session.get(url=url, headers=headers, verify=False)
    _element = etree.HTML(res.content)

    # 获取window.__playinfo__的json对象,[20:]表示截取'window.__playinfo__='后面的json字符串
    videoPlayInfo = str(_element.xpath(
        '//head/script[5]/text()')[0].encode('utf-8').decode('utf-8'))[20:]
    videoJson = json.loads(videoPlayInfo)
    # 获取视频链接和音频链接
    try:
        # 2018年以后的b站视频由.audio和.video组成 flag=0表示分为音频与视频
        videoURL = videoJson['data']['dash']['video'][0]['baseUrl']
        audioURl = videoJson['data']['dash']['audio'][0]['baseUrl']
        flag = 0

    except Exception:
        # 2018年以前的b站视频音频视频结合在一起,后缀为.flv flag=1表示只有视频
        videoURL = videoJson['data']['durl'][0]['url']
        flag = 1

    # 指定文件生成目录,如果不存在则创建目录

    print('正在下载 "' + video_data['video_name'] + '" 的视频····')
    donwnload(
        homeurl=url,
        url=videoURL,
        name=video_data['video_dirname'] +
        '/' +
        video_data['video_name'] +
        '.mp4',
        session=session)

    if flag == 0:
        print('正在下载 "' + video_data['video_name'] + '" 的音频····')
        donwnload(
            homeurl=url,
            url=audioURl,
            name=video_data['video_dirname'] +
            '/' +
            video_data['video_name'] +
            '.mp3',
            session=session)

    print(' "' + video_data['video_bv'] + '" 下载完成！')


def donwnload(homeurl, url, name, session=requests.session()):
    # 添加请求头键值对,写上 refered:请求来源
    headers.update({'Referer': homeurl})
    # 发送option请求服务器分配资源
    session.options(url=url, headers=headers, verify=False)
    # 指定每次下载1M的数据
    begin = 0
    end = 1024 * 512 - 1
    flag = 0

    while True:

        # 添加请求头键值对,写上 range:请求字节范围
        headers.update({'Range': 'bytes=' + str(begin) + '-' + str(end)})
        # 获取视频分片
        res = session.get(url=url, headers=headers, verify=False)
        # print(session)

        if res.status_code != 416:
            # 响应码不为为416时有数据
            begin = end + 1
            end = end + 1024 * 512

        else:
            headers.update({'Range': str(end + 1) + '-'})
            res = session.get(url=url, headers=headers, verify=False)
            flag = 1

        with open(name.encode("utf-8").decode("utf-8"), 'ab') as fp:
            fp.write(res.content)
            fp.flush()

        if flag == 1:
            fp.close()
            break


if __name__ == '__main__':
    # 用户UID_123456
    user_id = 0000000
    # 保存到本地文件_"C:/ttt/"
    save_dict = ""
    # 收藏夹名称如果为空则下载所有收藏夹_"name"
    favlist_name = ""
    get_user_favlist(user_id, save_dict, favlist_name)
